{"version":3,"sources":["../src/interfaces.ts"],"names":[],"mappings":";;AAkEA,IAAY,aAGX;AAHD,WAAY,aAAa;IACrB,+DAAW,CAAA;IACX,+DAAW,CAAA;AACf,CAAC,EAHW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAGxB;AAKD,IAAY,kBAKX;AALD,WAAY,kBAAkB;IAC1B,gDAAO,MAAa,UAAA,CAAA;IACpB,iDAAQ,OAAc,WAAA,CAAA;IACtB,iDAAQ,OAAc,WAAA,CAAA;IACtB,wDAAe,aAAoB,kBAAA,CAAA;AACvC,CAAC,EALW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAK7B;AAsBY,QAAA,QAAQ,GAAG,IAAI,CAAC","file":"interfaces.js","sourcesContent":["\n// options they can use to create the typechecker\nexport interface ITypeCheckerOptions {\n    // base path\n    basePath: string;\n\n    // path to tsconfig file (from basepath)\n    tsConfig: string;\n\n    // throw options\n    throwOnSyntactic?: boolean;\n    throwOnSemantic?: boolean;\n    throwOnTsLint?: boolean;\n    throwOnGlobal?: boolean;\n    throwOnOptions?: boolean;\n\n    // color options\n    yellowOnLint?: boolean;\n    yellowOnOptions?: boolean;\n    yellowOnGlobal?: boolean;\n    yellowOnSemantic?: boolean;\n    yellowOnSyntactic?: boolean;\n\n    // path to tslint json (from basepath)\n    tsLint?: string;\n\n    // name that will be displayed on cmd echo\n    name?: string;\n\n    // lint options that can be passed in\n    // todo: rename to lintOptions, but thats a breaking change, so will do that later\n    lintoptions?: ILintOptions;\n\n    // use shortened filenames in order to make output less cluttered\n    shortenFilenames?: boolean;\n\n    // emit files according to tsconfig file\n    emit?: boolean;\n\n    // output folder on emit\n    clearOnEmit?: boolean;\n}\n\n// lint options,this is the same as tsLint uses all paths will be from basepath\nexport interface ILintOptions {\n    fix?: boolean;\n    formatter?: string;\n    formattersDirectory?: string | null;\n    rulesDirectory?: string | null;\n}\n\n// extended internal options, needed for some internal usage\nexport interface IInternalTypeCheckerOptions extends ITypeCheckerOptions {\n    type: TypecheckerRunType;\n    tsConfigJsonContent?: any;\n    quit?: boolean;\n}\n\n// params used when calling worker to tell it what to do\nexport interface IWorkerOptions {\n    type: WorkerCommand;\n    options?: IInternalTypeCheckerOptions;\n    hasCallback?: boolean;\n}\n\n// run options for worker\nexport enum WorkerCommand {\n    inspectCode,\n    printResult\n}\n\n\n\n// checkers run types (when generating cmd print)\nexport enum TypecheckerRunType {\n    sync = 'syns' as any,\n    async = 'async' as any,\n    watch = 'watch' as any,\n    promiseAsync = 'promisesync' as any\n}\n\nexport interface ITSLintError {\n    fileName: string;\n    line: number;\n    char: number;\n    failure: string;\n    color: string;\n    ruleSeverity: string;\n    ruleName: string;\n}\n\nexport interface ITSError {\n    fileName: string;\n    line: number;\n    char: number;\n    message: string;\n    color: string;\n    category: string;\n    code: string;\n}\n\nexport const END_LINE = '\\n';\n"],"sourceRoot":"src/"}