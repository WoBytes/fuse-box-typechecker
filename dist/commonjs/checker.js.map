{"version":3,"sources":["../src/checker.ts"],"names":[],"mappings":"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","file":"checker.js","sourcesContent":["import * as ts from 'typescript';\nimport chalk from 'chalk';\nimport * as path from 'path';\nimport * as fs from 'fs';\n\nimport { IInternalTypeCheckerOptions, END_LINE, ITSLintError, ITSError } from './interfaces';\n\nimport * as TSLintTypes from 'tslint'; // Just use types\nlet tslint: typeof TSLintTypes | null;\ntry {\n    tslint = require('tslint');\n} catch {\n    tslint = null;\n}\n\nconst entries: any = require('object.entries');\n\nif (!Object.entries) {\n    entries.shim();\n}\n\n\ntype TypeCheckError = ITSLintError | ITSError;\nfunction isTSError(error: TypeCheckError) {\n    return (<ITSError>error).code !== undefined;\n}\n\nexport class Checker {\n\n    // options that will be used when checking and printing results\n    private options: IInternalTypeCheckerOptions;\n\n    // typescript program\n    private program: ts.Program;\n\n    // time used to do typecheck/linting\n    private elapsedInspectionTime: number;\n\n    // type diagonstic returned by typescript\n    private tsDiagnostics: ts.Diagnostic[];\n\n    // lint result returned by tsLint\n    private lintFileResult: TSLintTypes.LintResult[];\n\n\n    constructor() {\n        // nothing atm\n    }\n\n\n    public inspectCode(options: IInternalTypeCheckerOptions) {\n        this.options = options;\n\n\n        // parse it right away, no need to wait...\n        const parseConfigHost: any = {\n            fileExists: ts.sys.fileExists,\n            readDirectory: ts.sys.readDirectory,\n            readFile: ts.sys.readFile,\n            useCaseSensitiveFileNames: true\n        };\n\n        // take the time\n        let inspectionTimeStart = new Date().getTime();\n\n        // get program and get diagnostics and store them diagnostics\n        const parsed = ts.parseJsonConfigFileContent(this.options.tsConfigJsonContent, parseConfigHost, options.basePath || '.', undefined);\n        this.program = ts.createProgram(parsed.fileNames, parsed.options, undefined, this.program);\n\n\n        // get errors and tag them;\n        this.tsDiagnostics = [];\n        let optionsErrors = this.program.getOptionsDiagnostics().map((obj) => {\n            // tag em so we know for later\n            (<any>obj)._type = 'options';\n            return obj;\n        });\n        this.tsDiagnostics = this.tsDiagnostics.concat(optionsErrors);\n\n\n\n        let globalErrors = this.program.getGlobalDiagnostics().map((obj) => {\n            (<any>obj)._type = 'global';\n            return obj;\n        });\n        this.tsDiagnostics = this.tsDiagnostics.concat(globalErrors);\n\n\n\n        let syntacticErrors = this.program.getSyntacticDiagnostics().map((obj) => {\n            (<any>obj)._type = 'syntactic';\n            return obj;\n        });\n        this.tsDiagnostics = this.tsDiagnostics.concat(syntacticErrors);\n\n\n\n        let semanticErrors = this.program.getSemanticDiagnostics().map((obj) => {\n            (<any>obj)._type = 'semantic';\n            return obj;\n        });\n        this.tsDiagnostics = this.tsDiagnostics.concat(semanticErrors);\n\n\n        // get tslint if json file is supplied\n        this.lintFileResult = [];\n        if (options.tsLint) {\n\n            if (!tslint) {\n                this.writeText(\n                    chalk.red(`\\nMake sure to have ${chalk.bgWhiteBright('tslint')} installed if you use the \"tsLint\" option:\\n`) +\n                    chalk.redBright('npm install --save-dev tslint\\n\\n')\n                );\n                throw new Error('tslint not installed');\n            }\n\n            // get full path\n            let fullPath = path.resolve(this.options.basePath, options.tsLint);\n\n            // gets the files, lint every file and store errors in lintResults\n            let files = tslint.Linter.getFileNames(this.program);\n\n            // get tslint configuration\n            const tsLintConfiguration = tslint.Configuration.findConfiguration(fullPath, this.options.basePath).results;\n\n            // lint the files\n            this.lintFileResult =\n                files.map(file => {\n                    // get content of file\n                    let fileContents: any = this.program.getSourceFile(file);\n                    fileContents = fileContents ? fileContents.getFullText() : '';\n\n                    // create new linter using lint options and tsprogram\n                    const linter = new tslint!.Linter((<TSLintTypes.ILinterOptions>options.lintoptions), this.program);\n\n                    // lint file using filename, filecontent, and tslint configuration\n                    linter.lint(file, fileContents, tsLintConfiguration);\n\n                    // return result\n                    return linter.getResult();\n                }).filter((result) => {\n                    // only return the one with erros\n                    return result.errorCount ? true : false;\n                });\n        }\n\n        // save elapsed check time\n        this.elapsedInspectionTime = new Date().getTime() - inspectionTimeStart;\n    }\n\n\n\n    /**\n     * print result\n     *\n     */\n    public printResult(isWorker?: boolean) {\n\n        // consts\n        const print = this.writeText;\n        const program = this.program;\n        const options = this.options;\n\n        // print header\n        print(\n            chalk.bgWhite(\n                chalk.black(`${END_LINE}Typechecker plugin(${options.type}) ${options.name}`)\n            ) +\n            chalk.white(`.${END_LINE}`)\n        );\n\n        // print time\n        print(\n            chalk.grey(`Time:${new Date().toString()} ${END_LINE}`)\n        );\n\n        // get the lint errors messages\n        let lintErrorMessages: TypeCheckError[] = this.processLintFiles();\n\n        // loop diagnostics and get the errors messages\n        let tsErrorMessages: TypeCheckError[] = this.processTsDiagnostics();\n\n        // combine errors and print if any\n        let combinedErrors: TypeCheckError[] = tsErrorMessages.concat(lintErrorMessages);\n\n        // group by filename\n        let groupedErrors: { [k: string]: TypeCheckError[] } = {};\n        combinedErrors.forEach((error: TypeCheckError) => {\n            if (!groupedErrors[error.fileName]) {\n                groupedErrors[error.fileName] = [] as TypeCheckError[];\n            }\n\n            groupedErrors[error.fileName].push(error);\n        });\n\n        let allErrors = Object.entries(groupedErrors)\n            .map(([fileName, errors]) => {\n                const short = this.options.shortenFilenames;\n                const fullFileName = path.resolve(fileName);\n                const shortFileName = fullFileName.split(options.basePath).join('.');\n                return chalk.white(`└── ${shortFileName}`) + END_LINE + errors.map((err: TypeCheckError) => {\n                    let text = chalk.red('   |');\n                    if (isTSError(err)) {\n                        text += chalk[err.color](` ${short ? shortFileName : fullFileName} (${err.line},${err.char}) `);\n                        text += chalk.white(`(${(<ITSError>err).category}`);\n                        text += chalk.white(`${(<ITSError>err).code})`);\n                        text += ' ' + (<ITSError>err).message;\n                    } else {\n                        text += chalk[err.color](` ${short ? shortFileName : fullFileName} (${err.line + 1},${err.char + 1}) `);\n                        text += chalk.white(`(${(<ITSLintError>err).ruleSeverity}:`);\n                        text += chalk.white(`${(<ITSLintError>err).ruleName})`);\n                        text += ' ' + (<ITSLintError>err).failure;\n                    }\n\n                    return text;\n                }).join(END_LINE);\n            });\n\n        // print if any\n        if (allErrors.length > 0) {\n            // insert header\n            allErrors.unshift(\n                chalk.underline(`${END_LINE}File errors`) + chalk.white(':') // fix windows\n            );\n            print(allErrors.join(END_LINE));\n        }\n\n        // print option errors\n        if (program.getOptionsDiagnostics().length) {\n            print(chalk.underline(`${END_LINE}${END_LINE}Option errors`) + chalk.white(`:${END_LINE}`));\n            let optionErrorsText = Object.entries(program.getOptionsDiagnostics())\n                .map(([no, err]) => {\n                    let text = no + ':';\n                    let messageText = (<any>err).messageText;\n                    if ((typeof messageText === 'object') && (messageText !== null)) {\n                        messageText = JSON.stringify(messageText);\n                    }\n                    text = chalk[options.yellowOnOptions ? 'yellow' : 'red']\n                        (`└── tsConfig: `);\n                    text += chalk.white(`(${(<any>err).category}:`);\n                    text += chalk.white(`${(<any>err).code})`);\n                    text += chalk.white(` ${messageText}`);\n                    return text;\n                });\n            print(optionErrorsText.join(END_LINE));\n        }\n\n        // print global errors\n        // todo: this needs testing, how do I create a global error??\n        /* try {\n            if (program.getGlobalDiagnostics().length) {\n                print(chalk.underline(`${END_LINE}${END_LINE}Global errors`) + chalk.white(`:${END_LINE}`));\n                let optionErrorsText = Object.entries(program.getGlobalDiagnostics())\n                    .map(([no, err]) => {\n                        let text = no + ':';\n                        text = chalk[options.yellowOnGlobal ? 'yellow' : 'red']\n                            (`└── tsConfig: `);\n                        text += chalk.white(`(${(<any>err).category}:`);\n                        text += chalk.white(`${(<any>err).code})`);\n                        text += chalk.white(` ${(<any>err).messageText}`);\n                        return text;\n                    });\n                print(optionErrorsText.join(END_LINE));\n            }\n        } catch (err) {\n            console.log(`Global error`);\n        } */\n\n        // time for summary >>>>>\n\n        // get errors totals\n        let optionsErrors = program.getOptionsDiagnostics().length;\n        let globalErrors = program.getGlobalDiagnostics().length;\n        let syntacticErrors = program.getSyntacticDiagnostics().length;\n        let semanticErrors = program.getSemanticDiagnostics().length;\n        let tsLintErrors = lintErrorMessages.length;\n        let totalsErrors = optionsErrors + globalErrors + syntacticErrors + semanticErrors + tsLintErrors;\n\n\n\n        // if errors, show user\n        if (totalsErrors) {\n\n            // write header\n            print(\n                chalk.underline(`${END_LINE}${END_LINE}Errors`) +\n                chalk.white(`:${totalsErrors}${END_LINE}`)\n            );\n\n            print(\n                chalk[optionsErrors ? options.yellowOnOptions ? 'yellow' : 'red' : 'white']\n                    (`└── Options: ${optionsErrors}${END_LINE}`)\n            );\n\n            print(\n                chalk[globalErrors ? options.yellowOnGlobal ? 'yellow' : 'red' : 'white']\n                    (`└── Global: ${globalErrors}${END_LINE}`)\n            );\n\n            print(\n                chalk[syntacticErrors ? options.yellowOnSyntactic ? 'yellow' : 'red' : 'white']\n                    (`└── Syntactic: ${syntacticErrors}${END_LINE}`)\n            );\n\n            print(\n                chalk[semanticErrors ? options.yellowOnSemantic ? 'yellow' : 'red' : 'white']\n                    (`└── Semantic: ${semanticErrors}${END_LINE}`)\n            );\n\n            print(\n                chalk[tsLintErrors ? options.yellowOnLint ? 'yellow' : 'red' : 'white']\n                    (`└── TsLint: ${tsLintErrors}${END_LINE}${END_LINE}`)\n            );\n\n            if (options.emit) {\n                print(\n                    chalk.grey(`Skipping emit file${END_LINE}`)\n                );\n            }\n\n        } else {\n            // if there no errors, then also give some feedback about this, so they know its working\n            print(\n                chalk.grey(`All good, no errors :-)${END_LINE}`)\n            );\n\n            if (options.emit) {\n                print(\n                    chalk.grey(`Getting ready to emit files${END_LINE}`)\n                );\n                try {\n                    if (options.clearOnEmit) {\n                        let outputFolder: any = program.getCompilerOptions().outDir;\n                        let deleteFolder = function (folder: string) {\n                            folder = path.join(folder);\n                            if (fs.existsSync(folder)) {\n                                fs.readdirSync(folder).forEach(function (file: string) {\n                                    let curPath = folder + '/' + file;\n                                    if (fs.lstatSync(curPath).isDirectory()) { // recurse\n                                        deleteFolder(curPath);\n                                    } else { // delete file\n                                        fs.unlinkSync(curPath);\n                                    }\n                                });\n                                fs.rmdirSync(folder);\n                            }\n                        };\n                        if (!outputFolder) {\n                            console.warn('output folder missing');\n                        } else {\n                            print(\n                                chalk.grey(`clearing output folder${END_LINE}`)\n                            );\n                            deleteFolder(outputFolder);\n                            print(\n                                chalk.grey(`Output folder cleared${END_LINE}`)\n                            );\n                            program.emit();\n                            print(\n                                chalk.grey(`Files emitted${END_LINE}`)\n                            );\n                        }\n                    } else {\n                        program.emit();\n                        print(\n                            chalk.grey(`Files emitted${END_LINE}`)\n                        );\n                    }\n                } catch (error) {\n                    print(\n                        chalk.red(`emitting files failed${END_LINE}`)\n                    );\n                }\n            }\n        }\n\n        print(\n            chalk.grey(`Typechecking time: ${this.elapsedInspectionTime}ms${END_LINE}`)\n        );\n\n\n        // final check how to end the checker, throw, exit or keep alive\n\n        switch (true) {\n\n            // if throwError is set then callback and quit\n            case options.throwOnGlobal && globalErrors > 0:\n            case options.throwOnOptions && optionsErrors > 0:\n            case options.throwOnSemantic && semanticErrors > 0:\n            case options.throwOnTsLint && tsLintErrors > 0:\n            case options.throwOnSyntactic && syntacticErrors > 0:\n                if (process.send) {\n                    process.send('error');\n                } else {\n                    print(chalk.grey(`error typechecker${END_LINE}${END_LINE}`));\n                }\n                // exit with error\n                process.exit(1);\n                break;\n\n            // if quit is set and its a worker, then post message and callback to main tread and tell its done\n            case options.quit && isWorker:\n                print(chalk.grey(`Quitting typechecker${END_LINE}${END_LINE}`));\n\n                // since Im a worker I need to send back a message;\n                (<any>process).send('done');\n                break;\n\n            // if quit is set and not worker, then just post message\n            case options.quit && !isWorker:\n                print(chalk.grey(`Quitting typechecker${END_LINE}${END_LINE}`));\n                break;\n\n            // default action\n            default:\n                print(chalk.grey(`Keeping typechecker alive${END_LINE}${END_LINE}`));\n        }\n\n        return totalsErrors;\n\n    }\n\n\n\n    /**\n     * write to screen helper\n     *\n     */\n    private writeText(text: string) {\n        ts.sys.write(text);\n    }\n\n\n\n    /**\n     * loops lint failures and return pretty failure string ready to be printed\n     *\n     */\n    private processLintFiles(): ITSLintError[] {\n        const options = this.options;\n        const erroredLintFiles = this.lintFileResult\n            .filter((fileResult: TSLintTypes.LintResult) => fileResult.failures);\n        const errors = erroredLintFiles\n            .map(\n                (fileResult: TSLintTypes.LintResult) =>\n                    fileResult.failures.map((failure: any) => ({\n                        fileName: failure.fileName,\n                        line: failure.startPosition.lineAndCharacter.line,\n                        char: failure.startPosition.lineAndCharacter.character,\n                        ruleSeverity: failure.ruleSeverity.charAt(0).toUpperCase() + failure.ruleSeverity.slice(1),\n                        ruleName: failure.ruleName,\n                        color: options.yellowOnLint ? 'yellow' : 'red',\n                        failure: failure.failure\n                    }))).reduce((acc, curr) => acc.concat(curr), []);\n        return errors;\n    }\n\n    /**\n     * loops ts failures and return pretty failure string ready to be printed\n     *\n     */\n    private processTsDiagnostics(): ITSError[] {\n        const options = this.options;\n        return this.tsDiagnostics\n            .filter((diag: any) => diag.file)\n            .map((diag: any) => {\n                // set color from options\n                let color: string;\n                switch (diag._type) {\n                    case 'options':\n                        color = options.yellowOnOptions ? 'yellow' : 'red';\n                        break;\n                    case 'global':\n                        color = options.yellowOnGlobal ? 'yellow' : 'red';\n                        break;\n                    case 'syntactic':\n                        color = options.yellowOnSyntactic ? 'yellow' : 'red';\n                        break;\n                    case 'semantic':\n                        color = options.yellowOnSemantic ? 'yellow' : 'red';\n                        break;\n                    default:\n                        color = 'red';\n                }\n                const {\n                    line,\n                    character\n                } = diag.file.getLineAndCharacterOfPosition(diag.start);\n                return {\n                    fileName: diag.file.fileName,\n                    line: line + 1, // `(${line + 1},${character + 1})`,\n                    message: ts.flattenDiagnosticMessageText(diag.messageText, END_LINE),\n                    char: character + 1,\n                    color: color,\n                    category: `${ts.DiagnosticCategory[diag.category]}:`,\n                    code: `TS${diag.code}`\n                };\n            });\n    }\n}\n"],"sourceRoot":"src/"}